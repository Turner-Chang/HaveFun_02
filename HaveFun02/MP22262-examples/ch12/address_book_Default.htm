<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>通訊錄管理</title> 
<link rel=stylesheet type="text/css" href="css/style.css?v12">
<link rel=stylesheet type="text/css" href="css/sprite.css">

<style>
table {
	margin:10px;
}
tr, th, td {
    border-bottom: 1px solid #000000;	
}
th, td{
	text-align:center;
	padding:5px;
}
h3, p { display:inline-block;}
</style>
<script>
window.addEventListener('load', () => {
    
	window.indexedDB = window.indexedDB || window.mozIndexedDB || 	window.webkitIndexedDB || window.msIndexedDB;
	if (!window.indexedDB) {
		showMessage("您的瀏覽器不支援indexedDB");
	}

	var db = null;
	const dbName = "address_book";
	const storeName = "contacts";
	const version = 3;

	//開啟資料庫	
	(function init() {
	  var req = indexedDB.open(dbName, version);

	  req.onsuccess = (e) => {
		db = e.target.result;
		contactsList('','');
	  };

	  req.onerror = (e) => {
		showMessage("openDB error");
	  };

	  req.onupgradeneeded = (e) => {
	  var thisDB = e.target.result;	  
	  if (!thisDB.objectStoreNames.contains(storeName)) {
		  var objectStore = thisDB.createObjectStore(storeName, { keyPath: "id", autoIncrement : true });
		  objectStore.createIndex("name", "name", { unique: false });
		  objectStore.createIndex("tel", "tel", { unique: true });
		  objectStore.createIndex("timestamp", "timestamp", { unique: false });

		  //要新增的資料array
			const contactsData = [
			  {name: "陳小凌", tel:"0923123123", address:"高雄市", email: "eileen@msa.hinet.net", memo:"朋友", timestamp:new Date()},
			  {name: "丁小雨", tel:"0922456456", address:"台北市", email: "brain@msa.hinet.net", memo:"老師", timestamp:new Date()},
			  {name: "劉小華", tel:"0921567567", address:"台中市", email: "mark@hinet.net", memo:"朋友", timestamp:new Date()}
			];

		  //新增資料到objectStore
		  contactsData.forEach(function(user){		 
			objectStore.add(user);
		  })

		}
	  };

	  putbtn.style.display = 'none';
	  findbtn.style.display = 'none';
	  findDate.style.display = 'none';

	})();

	//開啟交易
	function DB_tx(storeName, mode) {
		let tx = db.transaction(storeName, mode);
		tx.onerror = (e) => {
		  console.error("tx", e);
		};
		return tx;
	}

	//新增資料
	document.getElementById('newbtn').addEventListener('click', newData);
	function newData(e){
		
		putbtn.style.display = 'none';      //「修改OK」按鈕設為隱藏
		addbtn.style.display = 'inline';	 //「新增OK」按鈕設為顯示
		findbtn.style.display = 'none';	 //「送出搜尋」按鈕設為隱藏
		findDate.style.display = 'none';	 //「建立日期」區塊設為隱藏
		document.getElementById('showJob').innerHTML = "新增資料"; //更改h3標記的內文
		
		//清空form所有欄位的資料
		document.getElementById('contactsform').reset();
	}

	//開啟搜尋模式
	document.getElementById('searchDatabtn').addEventListener('click', searchDataStart);
	function searchDataStart(e){
		
		//新增OK按鈕設為顯示，修改OK按鈕設為隱藏
		putbtn.style.display = 'none';
		addbtn.style.display = 'none';
		findbtn.style.display = 'inline';
		findDate.style.display = 'block';
		document.getElementById('showJob').innerHTML = "搜尋資料";
		
		//清空所有文字欄位的資料
		document.getElementById('contactsform').reset();
	}

	//新增完成 或 修改完成
	document.getElementById('addbtn').addEventListener('click', createAndUpdate);
	document.getElementById('putbtn').addEventListener('click', createAndUpdate);
	function createAndUpdate(e) {
	  
	  let tx = DB_tx(storeName, 'readwrite');   //交易權限是可讀寫
      tx.oncomplete = (e) => {     //交易完成時觸發
			contactsList('','');   //重整列表資料
      };
	  let store = tx.objectStore(storeName);

	  //取得文字方塊輸入內容
	  let name = document.getElementById("name").value.trim();
	  let tel = document.getElementById("tel").value.trim();
	  let address = document.getElementById("address").value.trim();
	  let email = document.getElementById("email").value.trim();
	  let memo = document.getElementById("memo").value.trim();

		
	  let r = null;

	  //藉由IDkey的值，判斷是新增或修改
	  let IDkey = document.getElementById("IDkey").value.trim();
	  if (IDkey === "")   //IDkey為空，表示正在新增
	  {	  
		  value = {			  
			  name, 
			  tel,
			  address,
			  email,
			  memo,
			  timestamp:new Date()    //加上時間戳記
		  };
		  r = store.add(value);	     //新增資料  
		  r.onsuccess = (e) => {
			showMessage("資料新增成功!");   //顯示成功訊息
		  };
		  r.onerror = (e) => {
			showMessage("資料新增失敗!<br>" + e.target.error.message);   //顯示失敗訊息
		  };
	  }else{      
		  //修改資料
		  value = {
			  id: Number(IDkey),       //更新此id的資料
			  name, 
			  tel,
			  address,
			  email,
			  memo,			  
			  timestamp:new Date()    //加上時間戳記
		  };
		 
		  r = store.put(value);	     //更新資料 
		  r.onsuccess = (e) => {
			showMessage("資料修改成功!");
		  };
		  r.onerror = (e) => {
			showMessage("資料修改失敗!<br>" + e.target.error.message);
		  };	  
	  }
	}

	//搜尋資料
	document.getElementById('findbtn').addEventListener('click', readData);
	function readData(e) {	
		
		let name = document.getElementById("name").value.trim();
		let tel = document.getElementById("tel").value.trim();
		let address = document.getElementById("address").value.trim();
		let email = document.getElementById("email").value.trim();
		let memo = document.getElementById("memo").value.trim();
		let startDate = document.getElementById("startDate").value.trim();
		let endDate = document.getElementById("endDate").value.trim();
		
		if (name=="" && tel=="" && address=="" && memo=="" && startDate=="" && endDate=="") contactsList("","");
		
		if (name) contactsList("name",name);
		if (tel) contactsList("name",tel);
		if (address) contactsList("name",address);
		if (email) contactsList("email",email);
		if (startDate!="" && endDate!="") contactsList("timestamp",startDate+"|"+endDate);		
	}

	//清空所有資料
	document.getElementById('clearDatabtn').addEventListener('click', (e) => {	
		
		if (confirm("確定要清空全部資料?")){		
			clearData();
		}
	})

	function clearData() {
		let tx = DB_tx(storeName, 'readwrite');   //呼叫DB_tx函式開啟交易
		let store = tx.objectStore(storeName);   //指定存儲物件
		store.clear();    //清空資料
		contactsList('','');   //呼叫contactsList函式顯示列表資料
		showMessage("資料已清空!");    //呼叫showMessage函式顯示執行結果
	}


	//刪除資料庫
	document.getElementById('dropDBbtn').addEventListener('click', (e) => {	
		
		if (confirm("確定要刪除資料庫?\n(刪除之後將重新載入頁面)")){		
			dropDB();
			location.reload();
		}
	})

	function dropDB() {	
		let req = indexedDB.deleteDatabase(dbName);
		req.onsuccess = (e) => {
			showMessage("資料庫已刪除!"); 
		}; 
		req.onerror = (e) => {
			showMessage("資料庫刪除失敗!<br>" + e.target.error.message); 
		}
	}
	
	
	/*listTb表格加入click事件，當按下的是按鈕就依照[data-key]屬性值找出資料*/	
	document.getElementById('listTb').addEventListener('click', (e) => {
		
		let target = e.target;	//點擊的目標物件

		//當目標物件是按鈕時才做處理
		if( target.tagName.toLowerCase() === 'button' ){
			
			let tr = target.closest('tr');       //找出最近的tr元素  
			let keyNo = parseInt(tr.dataset.key);	  //找出tr的data-key屬性值

			//開啟修改模式
			if(target.classList.contains('mdybtn')){
				let tx = DB_tx(storeName, 'readonly');
				let store = tx.objectStore(storeName);
				let oneRecords = store.get(keyNo);
				oneRecords.onsuccess = (e) => {	
				  let request = e.target; 
				  let obj = request.result;
				  
				  document.getElementById('name').value = obj.name;
				  document.getElementById('tel').value = obj.tel;
				  document.getElementById('address').value = obj.address;
				  document.getElementById('email').value = obj.email;
				  document.getElementById('memo').value = obj.memo;
				  document.getElementById('IDkey').value = obj.id;
				 
				  //新增OK按鈕設為隱藏，修改OK按鈕設為顯示
				  putbtn.style.display = 'inline';
				  addbtn.style.display = 'none';
				  document.getElementById('showJob').innerHTML = "修改資料";
				}
			}
			//刪除資料
			if(target.classList.contains('delbtn')){  
				if (confirm("確定要執行刪除?")){				
					let tx = DB_tx(storeName, 'readwrite');
					let store = tx.objectStore(storeName);
					let oneRecords = store.delete(keyNo);
					oneRecords.onsuccess = (e) => {	
						contactsList('','');
					}
					oneRecords.onerror = (e) => {
						showMessage("刪除失敗!<br>" + e.target.error.message);
					}
				}
			}
		}
	})

	 //取得資料並列表
	 function contactsList(find, findvalue) {
		let ulist = document.getElementById("listTb");  
		ulist.innerHTML = "載入中...";
		let tx = DB_tx(storeName, 'readonly');
		let store = tx.objectStore(storeName);
		let allRecords = null;

		//判斷是搜尋或是完整資料列表
		if (find != ""){             
			if(find=="timestamp"){   //當使用建立時間搜尋時
				let d = findvalue.split('|');			
				findvalue = IDBKeyRange.bound(new Date(d[0]), new Date(d[1]));
			}
			let index = store.index(find);    //依索引欄位搜尋
			allRecords = index.getAll(findvalue);   //取出搜尋到的全部資料
		}else{
			allRecords = store.getAll();    //取出全部資料
		}
		
		allRecords.onsuccess = (e) => {
		  let request = e.target;	
		  
		  //使用map和join方法合併字串
		  let contents = request.result.map((obj) => {
			  return "<tr data-key="+obj.id+"><td>"+obj.name+"</td><td>"+obj.tel+"</td><td>"+obj.address+"</td><td>"+obj.email+"</td><td>"+obj.memo+"</td><td>"
			  + obj.timestamp.toLocaleString('zh-TW', {timeZone: 'Asia/Taipei'})
			  + "</td><td><button class='mdybtn smallBtn sprite sprite-edit'></button><button class='delbtn smallBtn sprite sprite-del'></button></td></tr>";
		  }).join('');
		  if (contents==""){
			ulist.innerHTML = "查無資料!"
		  }else{
			ulist.innerHTML = "<thead><tr><th>姓名</th><th>電話</th><th>地址</th><th>E-Mail</th><th>備註</th><th>建立日期</th><th>&nbsp;</th></tr></thead><tbody>"+contents+"</tbody>";			
		  }
		};
		allRecords.onerror = (e) => {
		  console.error("allRecords", e);
		};
	}

	//顯示訊息
	function showMessage(m){
		document.getElementById('msg').innerHTML = m;
		setTimeout(() => {
			document.getElementById('msg').innerHTML = "";
		}, 2000);
	}

})
</script>
</head>
<body>
<fieldset>
<legend>個人通訊錄</legend>
<button id="clearDatabtn" class="orangeBtn">清空資料</button><button id="dropDBbtn" class="orangeBtn">刪除資料庫</button>
<div style="float:right;">
<button id="newbtn" class="smallBtn sprite sprite-add"></button><button id="searchDatabtn" class="smallBtn sprite sprite-search"></button>
</div>
<div>
<h3 id="showJob">新增資料</h3>&nbsp;<p id="msg" style="color:red;"></p>
</div>
<form id="contactsform">
<label for="name">姓名：</label><input type="text" title="姓名" id='name' class="userItem">　　
<label for="tel">電話：</label><input type="text" id='tel' class="userItem"><br>
<label for="address">地址：</label><input type="text" id='address' class="userItem" size=58><br>
<label for="email">Mail：</label><input type="text" id='email' class="userItem" size=58><br>
<label for="memo">備註：</label><input type="text" id='memo' class="userItem" size=58><br>
<input type="hidden" id='IDkey' class="userItem">
<div id="findDate" style="margin:5px 0px">
<label for="timestamp">建立日期：<input type="date" id='startDate' value=""> ~ <input type="date" id='endDate' value="">
</div>
<button id="addbtn" class="btn">新增OK</button>
<button id="putbtn" class="btn">修改OK</button>
<button id="findbtn" class="btn">送出搜尋</button>
</form>
<section>
<table id='listTb'></table>
</section>
</fieldset>
</body>
</html>
